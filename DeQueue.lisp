(defstruct deque
  (front ())
  (back ()))

(defun push-front (item d)
  (push item (deque-front d))
  (values (deque-front d)))
(defun push-back (item d)
  (push item (deque-back d))
  (values (deque-back d)))
(defun pop-front (d)
  (let ((x 0))
    (if (= (length (deque-front d)) 0) (progn (:= x (car (reverse (deque-back d))))
                                             (setf (deque-back d) (butlast (deque-back d)))
                                             (values x))
        (pop (deque-front d)))))
(defun pop-back (d)
  (let ((x 0))
    (if (= (length (deque-back d)) 0) (progn (:= x (car (reverse (deque-front d))))
                                             (setf (deque-front d) (butlast (deque-front d)))
                                             (values x))
        (pop (deque-back d))))
  )

(deftest test-deque ()
  (let ((d (make-deque)))
    (check
     (equal (progn (push-front 1 d)
                   (push-front 2 d)
                   (push-front 3 d))
            '(3 2 1))
     (equal (pop-back d ) 1)
     (equal (pop-front d ) 3)
     (equal (pop-back d ) 2)
     (equal (progn (push-back 4 d)
                   (push-back 5 d)
                   (push-back 6 d))
            '(6 5 4))
     (equal (pop-front d) 4)
     (equal (pop-back d) 6)
     (equal (pop-front d) 5))))

(defun main ()
  (test-deque))
